// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: parser.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ImageParser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid           string           `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Id             *Selector        `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Image          *ImageSelector   `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	LargerImage    *Selector        `protobuf:"bytes,5,opt,name=larger_image,json=largerImage,proto3" json:"larger_image,omitempty"`
	RawImage       *Selector        `protobuf:"bytes,6,opt,name=raw_image,json=rawImage,proto3" json:"raw_image,omitempty"`
	UploadTime     *Selector        `protobuf:"bytes,7,opt,name=upload_time,json=uploadTime,proto3" json:"upload_time,omitempty"`
	Source         *Selector        `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`
	Rating         *Selector        `protobuf:"bytes,9,opt,name=rating,proto3" json:"rating,omitempty"`
	Score          *Selector        `protobuf:"bytes,10,opt,name=score,proto3" json:"score,omitempty"`
	UploaderAvatar *ImageSelector   `protobuf:"bytes,11,opt,name=uploader_avatar,json=uploaderAvatar,proto3" json:"uploader_avatar,omitempty"`
	ExtraSelector  []*ExtraSelector `protobuf:"bytes,99,rep,name=extra_selector,json=extraSelector,proto3" json:"extra_selector,omitempty"`
}

func (x *ImageParser) Reset() {
	*x = ImageParser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageParser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageParser) ProtoMessage() {}

func (x *ImageParser) ProtoReflect() protoreflect.Message {
	mi := &file_parser_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageParser.ProtoReflect.Descriptor instead.
func (*ImageParser) Descriptor() ([]byte, []int) {
	return file_parser_proto_rawDescGZIP(), []int{0}
}

func (x *ImageParser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageParser) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ImageParser) GetId() *Selector {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImageParser) GetImage() *ImageSelector {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *ImageParser) GetLargerImage() *Selector {
	if x != nil {
		return x.LargerImage
	}
	return nil
}

func (x *ImageParser) GetRawImage() *Selector {
	if x != nil {
		return x.RawImage
	}
	return nil
}

func (x *ImageParser) GetUploadTime() *Selector {
	if x != nil {
		return x.UploadTime
	}
	return nil
}

func (x *ImageParser) GetSource() *Selector {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ImageParser) GetRating() *Selector {
	if x != nil {
		return x.Rating
	}
	return nil
}

func (x *ImageParser) GetScore() *Selector {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *ImageParser) GetUploaderAvatar() *ImageSelector {
	if x != nil {
		return x.UploaderAvatar
	}
	return nil
}

func (x *ImageParser) GetExtraSelector() []*ExtraSelector {
	if x != nil {
		return x.ExtraSelector
	}
	return nil
}

type ListViewParser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid          string         `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ItemSelector  *Selector      `protobuf:"bytes,10,opt,name=item_selector,json=itemSelector,proto3" json:"item_selector,omitempty"` // 选取整个列表
	Title         *Selector      `protobuf:"bytes,11,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle      *Selector      `protobuf:"bytes,12,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	UploadTime    *Selector      `protobuf:"bytes,13,opt,name=upload_time,json=uploadTime,proto3" json:"upload_time,omitempty"`
	Star          *Selector      `protobuf:"bytes,14,opt,name=star,proto3" json:"star,omitempty"`
	ImgCount      *Selector      `protobuf:"bytes,15,opt,name=img_count,json=imgCount,proto3" json:"img_count,omitempty"`
	PreviewImg    *ImageSelector `protobuf:"bytes,16,opt,name=preview_img,json=previewImg,proto3" json:"preview_img,omitempty"`
	Tag           *Selector      `protobuf:"bytes,20,opt,name=tag,proto3" json:"tag,omitempty"`
	TagColor      *Selector      `protobuf:"bytes,21,opt,name=tag_color,json=tagColor,proto3" json:"tag_color,omitempty"`
	BadgeSelector *Selector      `protobuf:"bytes,22,opt,name=badge_selector,json=badgeSelector,proto3" json:"badge_selector,omitempty"`
	BadgeText     *Selector      `protobuf:"bytes,23,opt,name=badge_text,json=badgeText,proto3" json:"badge_text,omitempty"`
	BadgeColor    *Selector      `protobuf:"bytes,24,opt,name=badge_color,json=badgeColor,proto3" json:"badge_color,omitempty"`
	Paper         *Selector      `protobuf:"bytes,25,opt,name=paper,proto3" json:"paper,omitempty"`
	// 下一面
	NextPage      *Selector        `protobuf:"bytes,30,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	IdCode        *Selector        `protobuf:"bytes,31,opt,name=id_code,json=idCode,proto3" json:"id_code,omitempty"`
	ExtraSelector []*ExtraSelector `protobuf:"bytes,99,rep,name=extra_selector,json=extraSelector,proto3" json:"extra_selector,omitempty"`
}

func (x *ListViewParser) Reset() {
	*x = ListViewParser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListViewParser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListViewParser) ProtoMessage() {}

func (x *ListViewParser) ProtoReflect() protoreflect.Message {
	mi := &file_parser_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListViewParser.ProtoReflect.Descriptor instead.
func (*ListViewParser) Descriptor() ([]byte, []int) {
	return file_parser_proto_rawDescGZIP(), []int{1}
}

func (x *ListViewParser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListViewParser) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListViewParser) GetItemSelector() *Selector {
	if x != nil {
		return x.ItemSelector
	}
	return nil
}

func (x *ListViewParser) GetTitle() *Selector {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *ListViewParser) GetSubtitle() *Selector {
	if x != nil {
		return x.Subtitle
	}
	return nil
}

func (x *ListViewParser) GetUploadTime() *Selector {
	if x != nil {
		return x.UploadTime
	}
	return nil
}

func (x *ListViewParser) GetStar() *Selector {
	if x != nil {
		return x.Star
	}
	return nil
}

func (x *ListViewParser) GetImgCount() *Selector {
	if x != nil {
		return x.ImgCount
	}
	return nil
}

func (x *ListViewParser) GetPreviewImg() *ImageSelector {
	if x != nil {
		return x.PreviewImg
	}
	return nil
}

func (x *ListViewParser) GetTag() *Selector {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *ListViewParser) GetTagColor() *Selector {
	if x != nil {
		return x.TagColor
	}
	return nil
}

func (x *ListViewParser) GetBadgeSelector() *Selector {
	if x != nil {
		return x.BadgeSelector
	}
	return nil
}

func (x *ListViewParser) GetBadgeText() *Selector {
	if x != nil {
		return x.BadgeText
	}
	return nil
}

func (x *ListViewParser) GetBadgeColor() *Selector {
	if x != nil {
		return x.BadgeColor
	}
	return nil
}

func (x *ListViewParser) GetPaper() *Selector {
	if x != nil {
		return x.Paper
	}
	return nil
}

func (x *ListViewParser) GetNextPage() *Selector {
	if x != nil {
		return x.NextPage
	}
	return nil
}

func (x *ListViewParser) GetIdCode() *Selector {
	if x != nil {
		return x.IdCode
	}
	return nil
}

func (x *ListViewParser) GetExtraSelector() []*ExtraSelector {
	if x != nil {
		return x.ExtraSelector
	}
	return nil
}

type GalleryParser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// 基础
	Title       *Selector      `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle    *Selector      `protobuf:"bytes,4,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	UploadTime  *Selector      `protobuf:"bytes,5,opt,name=upload_time,json=uploadTime,proto3" json:"upload_time,omitempty"`
	Star        *Selector      `protobuf:"bytes,6,opt,name=star,proto3" json:"star,omitempty"`
	ImgCount    *Selector      `protobuf:"bytes,7,opt,name=img_count,json=imgCount,proto3" json:"img_count,omitempty"`    // 有多少图
	PageCount   *Selector      `protobuf:"bytes,8,opt,name=page_count,json=pageCount,proto3" json:"page_count,omitempty"` // 有多少面
	Language    *Selector      `protobuf:"bytes,9,opt,name=language,proto3" json:"language,omitempty"`                    // 语言
	CoverImg    *ImageSelector `protobuf:"bytes,10,opt,name=cover_img,json=coverImg,proto3" json:"cover_img,omitempty"`   // 封面图
	Description *Selector      `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`             // 描述
	// 缩略图
	ThumbnailSelector *Selector      `protobuf:"bytes,20,opt,name=thumbnail_selector,json=thumbnailSelector,proto3" json:"thumbnail_selector,omitempty"`
	Thumbnail         *ImageSelector `protobuf:"bytes,21,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	ThumbnailUrl      *Selector      `protobuf:"bytes,22,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	// 评论
	CommentSelector *Selector        `protobuf:"bytes,30,opt,name=comment_selector,json=commentSelector,proto3" json:"comment_selector,omitempty"`
	Comment         *CommentSelector `protobuf:"bytes,31,opt,name=comment,proto3" json:"comment,omitempty"`
	// 分类
	Tag      *Selector `protobuf:"bytes,40,opt,name=tag,proto3" json:"tag,omitempty"`
	TagColor *Selector `protobuf:"bytes,41,opt,name=tag_color,json=tagColor,proto3" json:"tag_color,omitempty"`
	// 徽章
	BadgeSelector *Selector `protobuf:"bytes,50,opt,name=badge_selector,json=badgeSelector,proto3" json:"badge_selector,omitempty"`
	BadgeText     *Selector `protobuf:"bytes,51,opt,name=badge_text,json=badgeText,proto3" json:"badge_text,omitempty"`
	BadgeColor    *Selector `protobuf:"bytes,52,opt,name=badge_color,json=badgeColor,proto3" json:"badge_color,omitempty"`
	BadgeType     *Selector `protobuf:"bytes,53,opt,name=badge_type,json=badgeType,proto3" json:"badge_type,omitempty"`
	// 章节
	ChapterSelector *Selector      `protobuf:"bytes,60,opt,name=chapter_selector,json=chapterSelector,proto3" json:"chapter_selector,omitempty"`
	ChapterTitle    *Selector      `protobuf:"bytes,61,opt,name=chapter_title,json=chapterTitle,proto3" json:"chapter_title,omitempty"`
	ChapterSubtitle *Selector      `protobuf:"bytes,62,opt,name=chapter_subtitle,json=chapterSubtitle,proto3" json:"chapter_subtitle,omitempty"`
	ChapterCover    *ImageSelector `protobuf:"bytes,63,opt,name=chapter_cover,json=chapterCover,proto3" json:"chapter_cover,omitempty"`
	// 下一面
	NextPage          *Selector        `protobuf:"bytes,70,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	PrePageImageCount *Selector        `protobuf:"bytes,71,opt,name=pre_page_image_count,json=prePageImageCount,proto3" json:"pre_page_image_count,omitempty"` // 一页多少面, 用于跳页
	ExtraSelector     []*ExtraSelector `protobuf:"bytes,99,rep,name=extra_selector,json=extraSelector,proto3" json:"extra_selector,omitempty"`
}

func (x *GalleryParser) Reset() {
	*x = GalleryParser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryParser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryParser) ProtoMessage() {}

func (x *GalleryParser) ProtoReflect() protoreflect.Message {
	mi := &file_parser_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryParser.ProtoReflect.Descriptor instead.
func (*GalleryParser) Descriptor() ([]byte, []int) {
	return file_parser_proto_rawDescGZIP(), []int{2}
}

func (x *GalleryParser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GalleryParser) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GalleryParser) GetTitle() *Selector {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *GalleryParser) GetSubtitle() *Selector {
	if x != nil {
		return x.Subtitle
	}
	return nil
}

func (x *GalleryParser) GetUploadTime() *Selector {
	if x != nil {
		return x.UploadTime
	}
	return nil
}

func (x *GalleryParser) GetStar() *Selector {
	if x != nil {
		return x.Star
	}
	return nil
}

func (x *GalleryParser) GetImgCount() *Selector {
	if x != nil {
		return x.ImgCount
	}
	return nil
}

func (x *GalleryParser) GetPageCount() *Selector {
	if x != nil {
		return x.PageCount
	}
	return nil
}

func (x *GalleryParser) GetLanguage() *Selector {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *GalleryParser) GetCoverImg() *ImageSelector {
	if x != nil {
		return x.CoverImg
	}
	return nil
}

func (x *GalleryParser) GetDescription() *Selector {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *GalleryParser) GetThumbnailSelector() *Selector {
	if x != nil {
		return x.ThumbnailSelector
	}
	return nil
}

func (x *GalleryParser) GetThumbnail() *ImageSelector {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

func (x *GalleryParser) GetThumbnailUrl() *Selector {
	if x != nil {
		return x.ThumbnailUrl
	}
	return nil
}

func (x *GalleryParser) GetCommentSelector() *Selector {
	if x != nil {
		return x.CommentSelector
	}
	return nil
}

func (x *GalleryParser) GetComment() *CommentSelector {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *GalleryParser) GetTag() *Selector {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *GalleryParser) GetTagColor() *Selector {
	if x != nil {
		return x.TagColor
	}
	return nil
}

func (x *GalleryParser) GetBadgeSelector() *Selector {
	if x != nil {
		return x.BadgeSelector
	}
	return nil
}

func (x *GalleryParser) GetBadgeText() *Selector {
	if x != nil {
		return x.BadgeText
	}
	return nil
}

func (x *GalleryParser) GetBadgeColor() *Selector {
	if x != nil {
		return x.BadgeColor
	}
	return nil
}

func (x *GalleryParser) GetBadgeType() *Selector {
	if x != nil {
		return x.BadgeType
	}
	return nil
}

func (x *GalleryParser) GetChapterSelector() *Selector {
	if x != nil {
		return x.ChapterSelector
	}
	return nil
}

func (x *GalleryParser) GetChapterTitle() *Selector {
	if x != nil {
		return x.ChapterTitle
	}
	return nil
}

func (x *GalleryParser) GetChapterSubtitle() *Selector {
	if x != nil {
		return x.ChapterSubtitle
	}
	return nil
}

func (x *GalleryParser) GetChapterCover() *ImageSelector {
	if x != nil {
		return x.ChapterCover
	}
	return nil
}

func (x *GalleryParser) GetNextPage() *Selector {
	if x != nil {
		return x.NextPage
	}
	return nil
}

func (x *GalleryParser) GetPrePageImageCount() *Selector {
	if x != nil {
		return x.PrePageImageCount
	}
	return nil
}

func (x *GalleryParser) GetExtraSelector() []*ExtraSelector {
	if x != nil {
		return x.ExtraSelector
	}
	return nil
}

type AutoCompleteParser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid          string           `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Split         string           `protobuf:"bytes,10,opt,name=split,proto3" json:"split,omitempty"` // 分隔符, 默认为空格
	ItemSelector  *Selector        `protobuf:"bytes,11,opt,name=item_selector,json=itemSelector,proto3" json:"item_selector,omitempty"`
	ItemComplete  *Selector        `protobuf:"bytes,12,opt,name=item_complete,json=itemComplete,proto3" json:"item_complete,omitempty"`
	ItemSubtitle  *Selector        `protobuf:"bytes,13,opt,name=item_subtitle,json=itemSubtitle,proto3" json:"item_subtitle,omitempty"`
	ItemTitle     *Selector        `protobuf:"bytes,14,opt,name=item_title,json=itemTitle,proto3" json:"item_title,omitempty"`
	ExtraSelector []*ExtraSelector `protobuf:"bytes,99,rep,name=extra_selector,json=extraSelector,proto3" json:"extra_selector,omitempty"`
}

func (x *AutoCompleteParser) Reset() {
	*x = AutoCompleteParser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoCompleteParser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoCompleteParser) ProtoMessage() {}

func (x *AutoCompleteParser) ProtoReflect() protoreflect.Message {
	mi := &file_parser_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoCompleteParser.ProtoReflect.Descriptor instead.
func (*AutoCompleteParser) Descriptor() ([]byte, []int) {
	return file_parser_proto_rawDescGZIP(), []int{3}
}

func (x *AutoCompleteParser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AutoCompleteParser) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AutoCompleteParser) GetSplit() string {
	if x != nil {
		return x.Split
	}
	return ""
}

func (x *AutoCompleteParser) GetItemSelector() *Selector {
	if x != nil {
		return x.ItemSelector
	}
	return nil
}

func (x *AutoCompleteParser) GetItemComplete() *Selector {
	if x != nil {
		return x.ItemComplete
	}
	return nil
}

func (x *AutoCompleteParser) GetItemSubtitle() *Selector {
	if x != nil {
		return x.ItemSubtitle
	}
	return nil
}

func (x *AutoCompleteParser) GetItemTitle() *Selector {
	if x != nil {
		return x.ItemTitle
	}
	return nil
}

func (x *AutoCompleteParser) GetExtraSelector() []*ExtraSelector {
	if x != nil {
		return x.ExtraSelector
	}
	return nil
}

var File_parser_proto protoreflect.FileDescriptor

var file_parser_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf,
	0x03, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x0c, 0x6c, 0x61, 0x72, 0x67, 0x65,
	0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x61, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a,
	0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x1f, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x37, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x35, 0x0a, 0x0e, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x63, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x22, 0xc5, 0x05, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x0d, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x69,
	0x74, 0x65, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x08,
	0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x26,
	0x0a, 0x09, 0x69, 0x6d, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x6d, 0x67, 0x12, 0x1b, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x74, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x0e,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0d, 0x62, 0x61, 0x64, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28,
	0x0a, 0x0a, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x0b, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x62, 0x61, 0x64, 0x67, 0x65, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x70, 0x61, 0x70, 0x65, 0x72, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05,
	0x70, 0x61, 0x70, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x07, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x69, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x35, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x63, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xfa, 0x09, 0x0a, 0x0d, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x26, 0x0a, 0x09, 0x69, 0x6d, 0x67, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2b,
	0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x12, 0x2b, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x12, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x11, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x12, 0x2e, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c,
	0x12, 0x34, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12,
	0x26, 0x0a, 0x09, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x74,
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x0e, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0a, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x62, 0x61, 0x64, 0x67, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x0b, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0a, 0x62, 0x61, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x28, 0x0a, 0x0a, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x10, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0f,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x2e, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x34, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x09, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x3a, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x11, 0x70, 0x72, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35,
	0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x63, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xc3, 0x02, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x0d, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x69, 0x74,
	0x65, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x0d, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x69, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x0d, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x69, 0x74,
	0x65, 0x6d, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x63, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x09, 0x5a, 0x07, 0x2e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_parser_proto_rawDescOnce sync.Once
	file_parser_proto_rawDescData = file_parser_proto_rawDesc
)

func file_parser_proto_rawDescGZIP() []byte {
	file_parser_proto_rawDescOnce.Do(func() {
		file_parser_proto_rawDescData = protoimpl.X.CompressGZIP(file_parser_proto_rawDescData)
	})
	return file_parser_proto_rawDescData
}

var file_parser_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_parser_proto_goTypes = []interface{}{
	(*ImageParser)(nil),        // 0: ImageParser
	(*ListViewParser)(nil),     // 1: ListViewParser
	(*GalleryParser)(nil),      // 2: GalleryParser
	(*AutoCompleteParser)(nil), // 3: AutoCompleteParser
	(*Selector)(nil),           // 4: Selector
	(*ImageSelector)(nil),      // 5: ImageSelector
	(*ExtraSelector)(nil),      // 6: ExtraSelector
	(*CommentSelector)(nil),    // 7: CommentSelector
}
var file_parser_proto_depIdxs = []int32{
	4,  // 0: ImageParser.id:type_name -> Selector
	5,  // 1: ImageParser.image:type_name -> ImageSelector
	4,  // 2: ImageParser.larger_image:type_name -> Selector
	4,  // 3: ImageParser.raw_image:type_name -> Selector
	4,  // 4: ImageParser.upload_time:type_name -> Selector
	4,  // 5: ImageParser.source:type_name -> Selector
	4,  // 6: ImageParser.rating:type_name -> Selector
	4,  // 7: ImageParser.score:type_name -> Selector
	5,  // 8: ImageParser.uploader_avatar:type_name -> ImageSelector
	6,  // 9: ImageParser.extra_selector:type_name -> ExtraSelector
	4,  // 10: ListViewParser.item_selector:type_name -> Selector
	4,  // 11: ListViewParser.title:type_name -> Selector
	4,  // 12: ListViewParser.subtitle:type_name -> Selector
	4,  // 13: ListViewParser.upload_time:type_name -> Selector
	4,  // 14: ListViewParser.star:type_name -> Selector
	4,  // 15: ListViewParser.img_count:type_name -> Selector
	5,  // 16: ListViewParser.preview_img:type_name -> ImageSelector
	4,  // 17: ListViewParser.tag:type_name -> Selector
	4,  // 18: ListViewParser.tag_color:type_name -> Selector
	4,  // 19: ListViewParser.badge_selector:type_name -> Selector
	4,  // 20: ListViewParser.badge_text:type_name -> Selector
	4,  // 21: ListViewParser.badge_color:type_name -> Selector
	4,  // 22: ListViewParser.paper:type_name -> Selector
	4,  // 23: ListViewParser.next_page:type_name -> Selector
	4,  // 24: ListViewParser.id_code:type_name -> Selector
	6,  // 25: ListViewParser.extra_selector:type_name -> ExtraSelector
	4,  // 26: GalleryParser.title:type_name -> Selector
	4,  // 27: GalleryParser.subtitle:type_name -> Selector
	4,  // 28: GalleryParser.upload_time:type_name -> Selector
	4,  // 29: GalleryParser.star:type_name -> Selector
	4,  // 30: GalleryParser.img_count:type_name -> Selector
	4,  // 31: GalleryParser.page_count:type_name -> Selector
	4,  // 32: GalleryParser.language:type_name -> Selector
	5,  // 33: GalleryParser.cover_img:type_name -> ImageSelector
	4,  // 34: GalleryParser.description:type_name -> Selector
	4,  // 35: GalleryParser.thumbnail_selector:type_name -> Selector
	5,  // 36: GalleryParser.thumbnail:type_name -> ImageSelector
	4,  // 37: GalleryParser.thumbnail_url:type_name -> Selector
	4,  // 38: GalleryParser.comment_selector:type_name -> Selector
	7,  // 39: GalleryParser.comment:type_name -> CommentSelector
	4,  // 40: GalleryParser.tag:type_name -> Selector
	4,  // 41: GalleryParser.tag_color:type_name -> Selector
	4,  // 42: GalleryParser.badge_selector:type_name -> Selector
	4,  // 43: GalleryParser.badge_text:type_name -> Selector
	4,  // 44: GalleryParser.badge_color:type_name -> Selector
	4,  // 45: GalleryParser.badge_type:type_name -> Selector
	4,  // 46: GalleryParser.chapter_selector:type_name -> Selector
	4,  // 47: GalleryParser.chapter_title:type_name -> Selector
	4,  // 48: GalleryParser.chapter_subtitle:type_name -> Selector
	5,  // 49: GalleryParser.chapter_cover:type_name -> ImageSelector
	4,  // 50: GalleryParser.next_page:type_name -> Selector
	4,  // 51: GalleryParser.pre_page_image_count:type_name -> Selector
	6,  // 52: GalleryParser.extra_selector:type_name -> ExtraSelector
	4,  // 53: AutoCompleteParser.item_selector:type_name -> Selector
	4,  // 54: AutoCompleteParser.item_complete:type_name -> Selector
	4,  // 55: AutoCompleteParser.item_subtitle:type_name -> Selector
	4,  // 56: AutoCompleteParser.item_title:type_name -> Selector
	6,  // 57: AutoCompleteParser.extra_selector:type_name -> ExtraSelector
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_parser_proto_init() }
func file_parser_proto_init() {
	if File_parser_proto != nil {
		return
	}
	file_selector_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_parser_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageParser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListViewParser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryParser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoCompleteParser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_parser_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_parser_proto_goTypes,
		DependencyIndexes: file_parser_proto_depIdxs,
		MessageInfos:      file_parser_proto_msgTypes,
	}.Build()
	File_parser_proto = out.File
	file_parser_proto_rawDesc = nil
	file_parser_proto_goTypes = nil
	file_parser_proto_depIdxs = nil
}
